(load-theme 'xterm t)

(global-undo-tree-mode)
(setq undo-tree-auto-save-history t)

;; disable annoying elements
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)

;; this is a more important yes/no prompt, just overriding it with the basic one
(defalias 'yes-or-no-p 'y-or-n-p)

;; show line and column
(line-number-mode t)
(column-number-mode t)

;; emacs linum-mode is super slow, so I use this
(require 'nlinum-relative)
(add-hook 'prog-mode-hook #'nlinum-relative-mode)
(setq nlinum-relative-redisplay-delay 0)
(setq nlinum-relative-current-symbol "->")
(setq nlinum-relative-offset 0)

;; since I need to dynamically set common style settings, here are some reusable functions
(defun loli/style-tabs ()
  "Allow tabs for indentation"
  (interactive)
  (setq indent-tabs-mode t)
  (setq whitespace-style (delete 'tabs whitespace-style)))

(defun loli/style-spaces ()
  "Use only spaces for indentation and alignment"
  (interactive)
  (setq indent-tabs-mode nil)
  (add-to-list 'whitespace-style 'tabs))

;; default coding style
(defun loli/style-default ()
  "Default coding style settings"
  (setq whitespace-style '(face empty trailing))
  (loli/style-spaces)
  (set-default 'truncate-lines t)
  (whitespace-mode t))

;; tabs display as 2 spaces
(setq tab-width 2)

(add-hook 'prog-mode-hook #'loli/style-default)

;; C coding style
(setq c-default-style "linux")
(setq c-basic-offset 2)

;; go coding style
(add-hook 'go-mode-hook #'loli/style-tabs)
(add-hook 'before-save-hook #'gofmt-before-save)

;; electric-pairs: automatically close delimiter pairs
(setq electric-pair-pairs
      '((?\( . ?\))
        (?\[ . ?\])
        (?{ . })))

(electric-pair-mode t)

;; ido: fancy fuzzy search everywhere
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode t)

(require 'ido-vertical-mode)
(ido-vertical-mode t)

(defun loli/ido-keys ()
  "my ido keybinds"
  (define-key ido-completion-map (kbd "C-j") #'ido-next-match)
  (define-key ido-completion-map (kbd "C-k") #'ido-prev-match))

(add-hook 'ido-setup-hook #'loli/ido-keys)
(global-set-key (kbd "C-x C-b") #'ido-switch-buffer)

;; which-key: display command completions
(require 'which-key)
(which-key-mode)

;; tree-sitter
;; emacs' built-in font-lock is ridiculously slow and choppy when scrolling through lines quickly.
;; if syntax highlighting is not available with tree-sitter, we just don't use it because that
;; choppyness is just unacceptable

(global-font-lock-mode nil)
(require 'tree-sitter)
(require 'tree-sitter-langs)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

;; lsp: language server
(require 'lsp-mode)
(lsp-enable-which-key-integration t)
(add-hook 'c-mode-hook #'lsp-deferred)
(add-hook 'c++-mode-hook #'lsp-deferred)
(add-hook 'python-mode-hook #'lsp-deferred)
(add-hook 'go-mode-hook #'lsp-deferred)
(add-hook 'nix-mode-hook #'lsp-deferred)

;; go
(require 'go-mode)
(add-hook 'before-save-hook #'gofmt-before-save)

;; nix
(require 'nix-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))

(lsp-register-client
  (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                   :major-modes '(nix-mode)
                   :server-id 'nix))

;; nix-direnv integration
(require 'direnv)
(direnv-mode)
(setq direnv-always-show-summary nil)
(setq direnv-use-faces-in-summary nil)

;; company: fancy auto complete
(require 'company)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)
(global-company-mode)

;; ccls: c/c++ auto complete
(require 'ccls)
(delete 'company-clang company-backends)

;; eldoc: display parameters in the echo area as function calls are typed
(add-hook 'emacs-lisp-mode-hook #'eldoc-mode)

;; this is generated by nix code, couldn't figure out a better way to do this
(load (expand-file-name "generated.el" (file-name-directory load-file-name)))

;; other keybinds
(global-set-key (kbd "C-c C-r") #'sudo-edit-find-file)
(global-set-key (kbd "C-c SPC") #'whitespace-cleanup)

;; general: easier way to set up prefixed keybinds
(require 'general)
(general-evil-setup t)

(general-create-definer loli/leader-keys
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :global-prefix "C-SPC")

;; evil mode: sorry, I just cannot get used to emacs keybinds

(setq evil-want-integration t)
(setq evil-want-keybinding nil)

;; C-u scrolls like in vim instead of doing the emacs thing
(setq evil-want-C-u-scroll t)

;; C-i inserts a tab instead of doing vim-like jump
(setq evil-want-C-i-jump nil)

;; indent size
(setq evil-shift-width 2)

;; hook to disable evil mode in certain modes
(defun loli/evil-hook ()
  (dolist (mode '(git-rebase-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(add-hook 'evil-mode-hook #'loli/evil-hook)

(require 'evil)
(evil-mode t)
(define-key evil-insert-state-map (kbd "C-g") #'evil-normal-state)

(require 'evil-collection)
(evil-collection-init)

;; ctrl-h is backspace, saves some hand movement
(define-key evil-insert-state-map (kbd "C-h") #'evil-delete-backward-char-and-join)

;; visual mode is when lines that are too long are wrapped and they appear as multiple lines.
;; a normal next line command would go to the next real line, but next-visual-line goes to the
;; next apparent line, so that you can move between lines of a huge wrapped line
(evil-global-set-key 'motion "j" #'evil-next-visual-line)
(evil-global-set-key 'motion "k" #'evil-previous-visual-line)

;; default to normal mode for these modes
(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal)

;; hydra lets you create custom prompts with their own keybinds and a timeout
(require 'hydra)
(defhydra loli/text-scale ()
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out"))

(loli/leader-keys
  "t" '(:ignore t :which-key "toggle prompts")
  "ts" '(loli/text-scale/body :which-key "scale text"))

;; font settings
(set-face-attribute 'default nil :height 110 :family "PxPlus IBM VGA8")

;; disable all bold fonts because they look ugly with this font
;; this must be done after the theme is loaded
(mapc
 (lambda (face)
   (set-face-attribute face nil :weight 'normal))
 (face-list))
